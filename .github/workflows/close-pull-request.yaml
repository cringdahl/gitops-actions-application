name: Create Release

# Fetch email address of user triggering this action
# Trigger manifest repo PR closure (this includes the fetched email address)
# Delete all 'pr-##' images that aren't also tagged as releases

on:
  pull_request:
    types: [ closed ]
    branches: main
    paths: ['**.js', '**.json' , 'public/**', 'views/**', 'Dockerfile']

env:
  REGISTRY: ghcr.io
  REGISTRY_REPO: cringdahl/example-app
  APPNAME: example-app

jobs:
  check-if-merged:
    runs-on: ubuntu-latest
    steps:
      - name: Exit Action if not merged
        if: ${{ github.event.pull_request.merged == false }}
        run: |
          echo "PR not merged, exiting..."
          exit 1
  create-new-release:
    runs-on: ubuntu-latest
    needs: [check-if-merged]
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    - name: Get new version
      id: version
      # If we have no releases, cur_ver will be blank, and new_version will be 1
      run: |
        cur_ver=$(gh release list --json tagName -q .[0].tagName | sed 's/v//')
        echo "new_version=v$(($cur_ver+1))" >> $GITHUB_OUTPUT
      # TODO: cur_ver needs to jquery 'isLatest' to avoid potential conflicts
    - name: Create new release
      # defaults to Latest release, can put a test-based gate here if we want
      run: |
        gh release create ${{ steps.version.outputs.new_version }} --generate-notes
  
  tag-remote:
    runs-on: ubuntu-latest
    needs: [create-new-release]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get short SHA of commit for image tagging
      id: sha7
      run: echo "sha7=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Login to registry
      uses: docker/login-action@v3
      with:
        # username: ${{ secrets.REGISTRY_USER }}
        # password: ${{ secrets.REGISTRY_PASS }}
        username: ${{ github.actor }}
        password: ${{ github.token }}
        registry: ${{ env.REGISTRY }}

    - uses: imjasonh/setup-crane@v0.3
    - name: Tag remote image
      run: |
        crane auth login ${{ env.REGISTRY }} --username ${{ github.actor }} --password ${{ github.token }}
        crane tag \
        ${{ env.REGISTRY }}/${{ env.REGISTRY_REPO }}:pr-${{ github.event.pull_request.number }}-${{ steps.sha7.outputs.sha7 }} \
          ${{ needs.create-new-release.outputs.new_version }}

    - name: Write tag info to PR comment
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `# Image Tagging Results
          image: ${{ env.REGISTRY }}/${{ env.REGISTRY_REPO }}:${{ needs.create-new-release.outputs.new_version }}
          author: ${{ github.actor }}
          short sha: ${{ steps.sha7.outputs.sha7 }}`;

          github.rest.issues.createComment({
            issue_number: ${{ github.event.pull_request.number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Get email associated with Github username
      uses: cringdahl/get-github-email-by-username@v1
      id: get-email
      with: 
        github_username: ${{ github.actor }}
    - name: Update Manifest and Update PR
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.MANIFEST_PAT }} # must be repo scoped
        repository: cringdahl/gitops-actions-manifests
        event-type: update-container-image
        client-payload: |-
          {
            "appname": "${{ env.APPNAME }}",
            "actor": "${{ github.actor }} <${{steps.get-email.outputs.address}}>",
            "head_pr": "${{ github.event.pull_request.number }}",
            "message": "Updating image tag to: ${{ env.REGISTRY }}/${{ env.REGISTRY_REPO }}:${{ needs.create-new-release.outputs.new_version }}",
            "env_target": "prod",
            "image": "${{ env.REGISTRY }}/${{ env.REGISTRY_REPO }}:${{ needs.create-new-release.outputs.new_version }}",
            "version": "${{ needs.create-new-release.outputs.new_version }}"
          }
        

  close-manifest-pr:
    runs-on: ubuntu-latest
    needs: [tag-remote]
    steps:
    - name: Get email associated with Github username
      uses: cringdahl/get-github-email-by-username@v1
      id: get-email
      with: 
        github_username: ${{ github.actor }}
    - name: Trigger close PR workflow in the manifests repository
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.MANIFEST_PAT }} # Secret auths to manifest repo
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: '${{ github.repository_owner }}',
            repo: 'gitops-actions-manifests',
            workflow_id: 'close-pull-request.yaml',
            ref: 'main',
            inputs: {
              actor: '${{ github.actor }}  <${{ steps.get-email.outputs.address }}>',
              head_pr: '${{ github.event.pull_request.number }}',
              merged: ${{ github.event.pull_request.merged }}
            }
          })
  # prune-pr-images:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Prune images for PR-${{ github.event.number }}
  #     uses: vlaurin/action-ghcr-prune@v0.6.0
  #     with:
  #       token: ${{ github.token }}
  #       organization: cringdahl
  #       container: example-app
  #       dry-run: false
  #       prune-untagged: true
  #       keep-tags-regexes: |
  #         ^[0-9]+.[0-9]+.[0-9]+$
  #       prune-tags-regexes: |
  #         ^pr-${{ github.event.number }}